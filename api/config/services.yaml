parameters:
    app.api_token: '%env(resolve:APP_API_TOKEN)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Form/Model/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Security\ApiKeyAuthenticator:
        arguments:
            $appApiToken: '%app.api_token%'

    # Custom Interfaces
    App\Service\Utils\HttpClientInterface: '@App\Service\Utils\HttpClient' 
    
    # Custom JWT payload.  
    App\EventListener\JWTCreatedListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_created,
                method: onJWTCreated
            }
    # Custom JWT listener check IP.         
    App\EventListener\JWTDecodedListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_decoded,
                method: onJWTDecoded
            }
    # Custom JWT response on authentication success.          
    App\EventListener\JWTAuthenticationSuccessListener:
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_authentication_success,
                method: onAuthenticationSuccessResponse,
                priority: -1000,
            } 

    # Sonata Admin
    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Category }
        public: true

    admin.author:
        class: App\Admin\AuthorAdmin
        arguments: [~, App\Entity\Author, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Author }
        public: true

    admin.book:
        class: App\Admin\BookAdmin
        arguments: [~, App\Entity\Book, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Book }
        public: true
